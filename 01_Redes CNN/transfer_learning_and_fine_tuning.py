# -*- coding: utf-8 -*-
"""Transfer_Learning_and_Fine_tuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nnkGcDLF8cxXtvxjCYvZQUitk1uvpk_T
"""

import tensorflow as tf
import numpy as np
import keras
from keras.datasets import cifar10
from keras.models import Sequential,Model
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D,Input
from keras import backend as K
from keras.callbacks import TensorBoard
from keras.optimizers import SGD,Adam
from keras.applications import vgg16,resnet50,inception_resnet_v2,inception_v3,xception
from keras_preprocessing import image
import matplotlib.pylab as plt

batch_size=100
num_classes=10
epochs=50


TRANSFER_LEARNING=0
FINE_TUNING=1
if(TRANSFER_LEARNING):
      image_input = Input(shape=(224,224,3))
      modelo=vgg16.VGG16(weights='imagenet',include_top=False,input_shape=(224,224,3))
      for layer in modelo.layers[:]:
        layer.trainable = False
      x=modelo.output
      x=Flatten()(x)
      x=Dense(1000)(x)
      x=Dense(100)(x)
      modelo = Model(inputs=modelo.input, outputs=x)
      modelo.summary()
      
if(FINE_TUNING):
      image_input = Input(shape=(224,224,3))
      modelo=vgg16.VGG16(weights='imagenet',include_top=False,input_shape=(224,224,3))
      x=modelo.output
      x=Flatten()(x)
      x=Dense(1000,activation='relu')(x)
      x=Dense(100,activation='softmax')(x)
      modelo = Model(inputs=modelo.input, outputs=x)
      modelo.summary()

