# -*- coding: utf-8 -*-
"""benchmark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F24iydIQe5Pg5rd1HgtMq8Ljy54DrNkR
"""

import tensorflow as tf
import numpy as np
import keras
from keras.datasets import cifar10
from keras.models import Sequential,Model
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D,Input
from keras import backend as K
from keras.callbacks import TensorBoard
from keras.optimizers import SGD,Adam
from keras.applications import vgg16,resnet50,inception_resnet_v2,inception_v3,xception
from keras_preprocessing import image
import matplotlib.pylab as plt

batch_size=100
num_classes=10
epochs=50


from google.colab import drive
drive.mount('/content/drive/')


modelos=["vgg16","InceptionV3","Resnet50","InceptionV4(Inception-ResnetV2)","Xception"]
respuestas=["container_ship","motor_scooter","leopard","mushroom","Madagascar_cat","dalmatian","marmot","tiger"]
for nim in range(1,10):
  im="drive/My Drive/imagenet/imagen_%d.png" % (nim)
  for Modelo in range(0,5):
    img = image.load_img(im, target_size=(224, 224, 3))
    imagen = image.img_to_array(img)
    imagen = np.expand_dims(imagen, axis=0)
    if(Modelo==0):
      from keras.applications.vgg16 import preprocess_input
      imagen = preprocess_input(imagen)
      modelo=vgg16.VGG16(weights='imagenet',include_top=True)
      #modelo.summary()
    if(Modelo==1):
      from keras.applications.inception_v3 import preprocess_input
      imagen = preprocess_input(imagen)
      modelo=inception_v3.InceptionV3(weights='imagenet',include_top=True)
      #modelo.summary()
    if(Modelo==2):
      from keras.applications.resnet50 import preprocess_input
      imagen = preprocess_input(imagen)
      modelo=resnet50.ResNet50(weights='imagenet',include_top=True)
      #modelo.summary()
    if(Modelo==3):
      from keras.applications.inception_resnet_v2 import preprocess_input
      imagen = preprocess_input(imagen)
      modelo=inception_resnet_v2.InceptionResNetV2(weights='imagenet',include_top=True)
      #modelo.summary()
    if(Modelo==4):
      from keras.applications.xception import preprocess_input
      imagen = preprocess_input(imagen)
      modelo=xception.Xception(weights='imagenet',include_top=True)
      #modelo.summary()



    prediccion=modelo.predict(imagen)

    from keras.applications.imagenet_utils import decode_predictions

    prediccion_decodificada=decode_predictions(prediccion)
    #prediccion_decodificada=np.array(prediccion_decodificada)
    print("La prediccion del modelo %s es %s con una probabilidad de %f" % (modelos[Modelo],prediccion_decodificada[0][0][1],prediccion_decodificada[0][0][2]*100))
  plt.figure(1)
  plt.imshow(image.img_to_array(img)/255)
  plt.show()

